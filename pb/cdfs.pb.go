// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: cdfs.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTokenReq) Reset() {
	*x = GetTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenReq) ProtoMessage() {}

func (x *GetTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenReq.ProtoReflect.Descriptor instead.
func (*GetTokenReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{0}
}

type GetTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueToken string `protobuf:"bytes,1,opt,name=uniqueToken,proto3" json:"uniqueToken,omitempty"`
}

func (x *GetTokenResp) Reset() {
	*x = GetTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenResp) ProtoMessage() {}

func (x *GetTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenResp.ProtoReflect.Descriptor instead.
func (*GetTokenResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{1}
}

func (x *GetTokenResp) GetUniqueToken() string {
	if x != nil {
		return x.UniqueToken
	}
	return ""
}

type CSRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CSRegisterReq) Reset() {
	*x = CSRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRegisterReq) ProtoMessage() {}

func (x *CSRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRegisterReq.ProtoReflect.Descriptor instead.
func (*CSRegisterReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{2}
}

func (x *CSRegisterReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CSRegisterReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type CSRegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CSRegisterResp) Reset() {
	*x = CSRegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSRegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSRegisterResp) ProtoMessage() {}

func (x *CSRegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSRegisterResp.ProtoReflect.Descriptor instead.
func (*CSRegisterResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{3}
}

func (x *CSRegisterResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// TODO: which of these msgs need a token?
type GetLocationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Offset   uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size     uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetLocationReq) Reset() {
	*x = GetLocationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationReq) ProtoMessage() {}

func (x *GetLocationReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationReq.ProtoReflect.Descriptor instead.
func (*GetLocationReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{4}
}

func (x *GetLocationReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GetLocationReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetLocationReq) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetLocationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ChunkInfo []*ChunkServerInfo `protobuf:"bytes,2,rep,name=chunkInfo,proto3" json:"chunkInfo,omitempty"`
	// offset only for first
	// start for the first chunk
	Start uint32 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// end for the last chunk
	End uint32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetLocationResp) Reset() {
	*x = GetLocationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocationResp) ProtoMessage() {}

func (x *GetLocationResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocationResp.ProtoReflect.Descriptor instead.
func (*GetLocationResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{5}
}

func (x *GetLocationResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLocationResp) GetChunkInfo() []*ChunkServerInfo {
	if x != nil {
		return x.ChunkInfo
	}
	return nil
}

func (x *GetLocationResp) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetLocationResp) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type ChunkServerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle    string   `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	PrimaryAddress string   `protobuf:"bytes,2,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	BackupAddress  []string `protobuf:"bytes,3,rep,name=backupAddress,proto3" json:"backupAddress,omitempty"`
}

func (x *ChunkServerInfo) Reset() {
	*x = ChunkServerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkServerInfo) ProtoMessage() {}

func (x *ChunkServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkServerInfo.ProtoReflect.Descriptor instead.
func (*ChunkServerInfo) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkServerInfo) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ChunkServerInfo) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *ChunkServerInfo) GetBackupAddress() []string {
	if x != nil {
		return x.BackupAddress
	}
	return nil
}

type AppendFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileSize uint32 `protobuf:"varint,2,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	Uuid     string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *AppendFileReq) Reset() {
	*x = AppendFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFileReq) ProtoMessage() {}

func (x *AppendFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFileReq.ProtoReflect.Descriptor instead.
func (*AppendFileReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{7}
}

func (x *AppendFileReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AppendFileReq) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *AppendFileReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *DeleteReq) Reset() {
	*x = DeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReq) ProtoMessage() {}

func (x *DeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReq.ProtoReflect.Descriptor instead.
func (*DeleteReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type CreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *CreateReq) Reset() {
	*x = CreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReq) ProtoMessage() {}

func (x *CreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReq.ProtoReflect.Descriptor instead.
func (*CreateReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{9}
}

func (x *CreateReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type CreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateResp) Reset() {
	*x = CreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResp) ProtoMessage() {}

func (x *CreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResp.ProtoReflect.Descriptor instead.
func (*CreateResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{10}
}

func (x *CreateResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode   int32  `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{11}
}

func (x *Status) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Status) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DeleteStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteStatus) Reset() {
	*x = DeleteStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStatus) ProtoMessage() {}

func (x *DeleteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStatus.ProtoReflect.Descriptor instead.
func (*DeleteStatus) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteStatus) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AppendFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PrimaryIP []string `protobuf:"bytes,2,rep,name=primaryIP,proto3" json:"primaryIP,omitempty"`
	// repeated uint32 chunkID = 3;
	ChunkHandle []string `protobuf:"bytes,3,rep,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
}

func (x *AppendFileResp) Reset() {
	*x = AppendFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFileResp) ProtoMessage() {}

func (x *AppendFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFileResp.ProtoReflect.Descriptor instead.
func (*AppendFileResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{13}
}

func (x *AppendFileResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AppendFileResp) GetPrimaryIP() []string {
	if x != nil {
		return x.PrimaryIP
	}
	return nil
}

func (x *AppendFileResp) GetChunkHandle() []string {
	if x != nil {
		return x.ChunkHandle
	}
	return nil
}

type HeartBeatPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated uint32 chunkID = 1;
	ChunkHandle []string `protobuf:"bytes,1,rep,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Used        []uint32 `protobuf:"varint,2,rep,packed,name=used,proto3" json:"used,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HeartBeatPayload) Reset() {
	*x = HeartBeatPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatPayload) ProtoMessage() {}

func (x *HeartBeatPayload) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatPayload.ProtoReflect.Descriptor instead.
func (*HeartBeatPayload) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{14}
}

func (x *HeartBeatPayload) GetChunkHandle() []string {
	if x != nil {
		return x.ChunkHandle
	}
	return nil
}

func (x *HeartBeatPayload) GetUsed() []uint32 {
	if x != nil {
		return x.Used
	}
	return nil
}

func (x *HeartBeatPayload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HeartBeatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *HeartBeatResp) Reset() {
	*x = HeartBeatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatResp) ProtoMessage() {}

func (x *HeartBeatResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatResp.ProtoReflect.Descriptor instead.
func (*HeartBeatResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{15}
}

func (x *HeartBeatResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AppendResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string  `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Size        uint32  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Status      *Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppendResultReq) Reset() {
	*x = AppendResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendResultReq) ProtoMessage() {}

func (x *AppendResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendResultReq.ProtoReflect.Descriptor instead.
func (*AppendResultReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{16}
}

func (x *AppendResultReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *AppendResultReq) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AppendResultReq) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AppendResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AppendResultResp) Reset() {
	*x = AppendResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendResultResp) ProtoMessage() {}

func (x *AppendResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendResultResp.ProtoReflect.Descriptor instead.
func (*AppendResultResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{17}
}

type DeleteChunkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
}

func (x *DeleteChunkReq) Reset() {
	*x = DeleteChunkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChunkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkReq) ProtoMessage() {}

func (x *DeleteChunkReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkReq.ProtoReflect.Descriptor instead.
func (*DeleteChunkReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteChunkReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

type DeleteChunkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteChunkResp) Reset() {
	*x = DeleteChunkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChunkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChunkResp) ProtoMessage() {}

func (x *DeleteChunkResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChunkResp.ProtoReflect.Descriptor instead.
func (*DeleteChunkResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteChunkResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateChunkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string   `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Role        uint32   `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
	Primary     string   `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
	Peers       []string `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *CreateChunkReq) Reset() {
	*x = CreateChunkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChunkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkReq) ProtoMessage() {}

func (x *CreateChunkReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkReq.ProtoReflect.Descriptor instead.
func (*CreateChunkReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{20}
}

func (x *CreateChunkReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *CreateChunkReq) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *CreateChunkReq) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

func (x *CreateChunkReq) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

type CreateChunkResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateChunkResp) Reset() {
	*x = CreateChunkResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChunkResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChunkResp) ProtoMessage() {}

func (x *CreateChunkResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChunkResp.ProtoReflect.Descriptor instead.
func (*CreateChunkResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{21}
}

func (x *CreateChunkResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ChangeToPrimaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string   `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Role        uint32   `protobuf:"varint,2,opt,name=role,proto3" json:"role,omitempty"`
	Peers       []string `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *ChangeToPrimaryReq) Reset() {
	*x = ChangeToPrimaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeToPrimaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeToPrimaryReq) ProtoMessage() {}

func (x *ChangeToPrimaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeToPrimaryReq.ProtoReflect.Descriptor instead.
func (*ChangeToPrimaryReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{22}
}

func (x *ChangeToPrimaryReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ChangeToPrimaryReq) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *ChangeToPrimaryReq) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

type ChangeToPrimaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChangeToPrimaryResp) Reset() {
	*x = ChangeToPrimaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeToPrimaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeToPrimaryResp) ProtoMessage() {}

func (x *ChangeToPrimaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeToPrimaryResp.ProtoReflect.Descriptor instead.
func (*ChangeToPrimaryResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{23}
}

func (x *ChangeToPrimaryResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AssignNewPrimaryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Primary     string `protobuf:"bytes,2,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *AssignNewPrimaryReq) Reset() {
	*x = AssignNewPrimaryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignNewPrimaryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNewPrimaryReq) ProtoMessage() {}

func (x *AssignNewPrimaryReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNewPrimaryReq.ProtoReflect.Descriptor instead.
func (*AssignNewPrimaryReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{24}
}

func (x *AssignNewPrimaryReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *AssignNewPrimaryReq) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

type AssignNewPrimaryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AssignNewPrimaryResp) Reset() {
	*x = AssignNewPrimaryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignNewPrimaryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignNewPrimaryResp) ProtoMessage() {}

func (x *AssignNewPrimaryResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignNewPrimaryResp.ProtoReflect.Descriptor instead.
func (*AssignNewPrimaryResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{25}
}

func (x *AssignNewPrimaryResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateBackupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string   `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Peers       []string `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *UpdateBackupReq) Reset() {
	*x = UpdateBackupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBackupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBackupReq) ProtoMessage() {}

func (x *UpdateBackupReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBackupReq.ProtoReflect.Descriptor instead.
func (*UpdateBackupReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateBackupReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *UpdateBackupReq) GetPeers() []string {
	if x != nil {
		return x.Peers
	}
	return nil
}

type UpdateBackupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateBackupResp) Reset() {
	*x = UpdateBackupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBackupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBackupResp) ProtoMessage() {}

func (x *UpdateBackupResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBackupResp.ProtoReflect.Descriptor instead.
func (*UpdateBackupResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateBackupResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ForwardCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Primary     string `protobuf:"bytes,2,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *ForwardCreateReq) Reset() {
	*x = ForwardCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardCreateReq) ProtoMessage() {}

func (x *ForwardCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardCreateReq.ProtoReflect.Descriptor instead.
func (*ForwardCreateReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{28}
}

func (x *ForwardCreateReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ForwardCreateReq) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

type ForwardCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ForwardCreateResp) Reset() {
	*x = ForwardCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardCreateResp) ProtoMessage() {}

func (x *ForwardCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardCreateResp.ProtoReflect.Descriptor instead.
func (*ForwardCreateResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{29}
}

func (x *ForwardCreateResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Version     uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionReq) Reset() {
	*x = GetVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionReq) ProtoMessage() {}

func (x *GetVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionReq.ProtoReflect.Descriptor instead.
func (*GetVersionReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{30}
}

func (x *GetVersionReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *GetVersionReq) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GetVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version   *uint32 `protobuf:"varint,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	ChunkData []byte  `protobuf:"bytes,3,opt,name=chunkData,proto3,oneof" json:"chunkData,omitempty"`
}

func (x *GetVersionResp) Reset() {
	*x = GetVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResp) ProtoMessage() {}

func (x *GetVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResp.ProtoReflect.Descriptor instead.
func (*GetVersionResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{31}
}

func (x *GetVersionResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetVersionResp) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *GetVersionResp) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

type ReadVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkHandle string `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
}

func (x *ReadVersionReq) Reset() {
	*x = ReadVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadVersionReq) ProtoMessage() {}

func (x *ReadVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadVersionReq.ProtoReflect.Descriptor instead.
func (*ReadVersionReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{32}
}

func (x *ReadVersionReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

type ReadVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version *uint32 `protobuf:"varint,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *ReadVersionResp) Reset() {
	*x = ReadVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadVersionResp) ProtoMessage() {}

func (x *ReadVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadVersionResp.ProtoReflect.Descriptor instead.
func (*ReadVersionResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{33}
}

func (x *ReadVersionResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReadVersionResp) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type ReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint32 seqNum = 1;
	// was uint32 chunkID = 2;
	ChunkHandle string `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	Token       string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Start       uint32 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// if end == 0, read the whole chunk
	End uint32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ReadReq) Reset() {
	*x = ReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq) ProtoMessage() {}

func (x *ReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq.ProtoReflect.Descriptor instead.
func (*ReadReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{34}
}

func (x *ReadReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ReadReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ReadReq) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReadReq) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type ReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint32 seqNum = 1;
	FileData []byte  `protobuf:"bytes,1,opt,name=fileData,proto3" json:"fileData,omitempty"`
	Status   *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Version  *uint32 `protobuf:"varint,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *ReadResp) Reset() {
	*x = ReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResp) ProtoMessage() {}

func (x *ReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResp.ProtoReflect.Descriptor instead.
func (*ReadResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{35}
}

func (x *ReadResp) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *ReadResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReadResp) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type AppendDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint32 seqSeq = 1;
	// was	uint32 chunkID = 2;
	ChunkHandle string `protobuf:"bytes,1,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	FileData    []byte `protobuf:"bytes,2,opt,name=fileData,proto3" json:"fileData,omitempty"`
	Token       string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *AppendDataReq) Reset() {
	*x = AppendDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendDataReq) ProtoMessage() {}

func (x *AppendDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendDataReq.ProtoReflect.Descriptor instead.
func (*AppendDataReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{36}
}

func (x *AppendDataReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *AppendDataReq) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *AppendDataReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AppendDataReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type AppendDataResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppendDataResp) Reset() {
	*x = AppendDataResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendDataResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendDataResp) ProtoMessage() {}

func (x *AppendDataResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendDataResp.ProtoReflect.Descriptor instead.
func (*AppendDataResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{37}
}

func (x *AppendDataResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ReplicateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uint32 seqNum = 1;
	// was clientIP
	ClientToken string `protobuf:"bytes,1,opt,name=clientToken,proto3" json:"clientToken,omitempty"`
	// was uint32 chunkID = 3;
	ChunkHandle string `protobuf:"bytes,2,opt,name=chunkHandle,proto3" json:"chunkHandle,omitempty"`
	FileData    []byte `protobuf:"bytes,3,opt,name=fileData,proto3" json:"fileData,omitempty"`
	ReqID       string `protobuf:"bytes,4,opt,name=reqID,proto3" json:"reqID,omitempty"`
	Version     uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ReplicateReq) Reset() {
	*x = ReplicateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateReq) ProtoMessage() {}

func (x *ReplicateReq) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateReq.ProtoReflect.Descriptor instead.
func (*ReplicateReq) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{38}
}

func (x *ReplicateReq) GetClientToken() string {
	if x != nil {
		return x.ClientToken
	}
	return ""
}

func (x *ReplicateReq) GetChunkHandle() string {
	if x != nil {
		return x.ChunkHandle
	}
	return ""
}

func (x *ReplicateReq) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *ReplicateReq) GetReqID() string {
	if x != nil {
		return x.ReqID
	}
	return ""
}

func (x *ReplicateReq) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ReplicateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Uuid   string  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ReplicateResp) Reset() {
	*x = ReplicateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdfs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateResp) ProtoMessage() {}

func (x *ReplicateResp) ProtoReflect() protoreflect.Message {
	mi := &file_cdfs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateResp.ProtoReflect.Descriptor instead.
func (*ReplicateResp) Descriptor() ([]byte, []int) {
	return file_cdfs_proto_rawDescGZIP(), []int{39}
}

func (x *ReplicateResp) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ReplicateResp) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

var File_cdfs_proto protoreflect.FileDescriptor

var file_cdfs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x64, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x22, 0x0d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x22,
	0x30, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x37, 0x0a, 0x0d, 0x43, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x34, 0x0a, 0x0e, 0x43, 0x53,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x0f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x5b, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x27,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x30, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x32, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x10, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6b, 0x0a,
	0x0f, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x32,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x22, 0x35, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x39, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e,
	0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22,
	0x36, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x37, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x4b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x32, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x07, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x75, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x34, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x71, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x32, 0xae, 0x03, 0x0a, 0x06, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2b,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x35,
	0x0a, 0x0a, 0x43, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x32, 0x8e, 0x05, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x77, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x04,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x79, 0x72, 0x6f, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x63, 0x64, 0x66,
	0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cdfs_proto_rawDescOnce sync.Once
	file_cdfs_proto_rawDescData = file_cdfs_proto_rawDesc
)

func file_cdfs_proto_rawDescGZIP() []byte {
	file_cdfs_proto_rawDescOnce.Do(func() {
		file_cdfs_proto_rawDescData = protoimpl.X.CompressGZIP(file_cdfs_proto_rawDescData)
	})
	return file_cdfs_proto_rawDescData
}

var file_cdfs_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_cdfs_proto_goTypes = []interface{}{
	(*GetTokenReq)(nil),          // 0: pb.GetTokenReq
	(*GetTokenResp)(nil),         // 1: pb.GetTokenResp
	(*CSRegisterReq)(nil),        // 2: pb.CSRegisterReq
	(*CSRegisterResp)(nil),       // 3: pb.CSRegisterResp
	(*GetLocationReq)(nil),       // 4: pb.GetLocationReq
	(*GetLocationResp)(nil),      // 5: pb.GetLocationResp
	(*ChunkServerInfo)(nil),      // 6: pb.ChunkServerInfo
	(*AppendFileReq)(nil),        // 7: pb.AppendFileReq
	(*DeleteReq)(nil),            // 8: pb.DeleteReq
	(*CreateReq)(nil),            // 9: pb.CreateReq
	(*CreateResp)(nil),           // 10: pb.CreateResp
	(*Status)(nil),               // 11: pb.Status
	(*DeleteStatus)(nil),         // 12: pb.DeleteStatus
	(*AppendFileResp)(nil),       // 13: pb.AppendFileResp
	(*HeartBeatPayload)(nil),     // 14: pb.HeartBeatPayload
	(*HeartBeatResp)(nil),        // 15: pb.HeartBeatResp
	(*AppendResultReq)(nil),      // 16: pb.AppendResultReq
	(*AppendResultResp)(nil),     // 17: pb.AppendResultResp
	(*DeleteChunkReq)(nil),       // 18: pb.DeleteChunkReq
	(*DeleteChunkResp)(nil),      // 19: pb.DeleteChunkResp
	(*CreateChunkReq)(nil),       // 20: pb.CreateChunkReq
	(*CreateChunkResp)(nil),      // 21: pb.CreateChunkResp
	(*ChangeToPrimaryReq)(nil),   // 22: pb.ChangeToPrimaryReq
	(*ChangeToPrimaryResp)(nil),  // 23: pb.ChangeToPrimaryResp
	(*AssignNewPrimaryReq)(nil),  // 24: pb.AssignNewPrimaryReq
	(*AssignNewPrimaryResp)(nil), // 25: pb.AssignNewPrimaryResp
	(*UpdateBackupReq)(nil),      // 26: pb.UpdateBackupReq
	(*UpdateBackupResp)(nil),     // 27: pb.UpdateBackupResp
	(*ForwardCreateReq)(nil),     // 28: pb.ForwardCreateReq
	(*ForwardCreateResp)(nil),    // 29: pb.ForwardCreateResp
	(*GetVersionReq)(nil),        // 30: pb.GetVersionReq
	(*GetVersionResp)(nil),       // 31: pb.GetVersionResp
	(*ReadVersionReq)(nil),       // 32: pb.ReadVersionReq
	(*ReadVersionResp)(nil),      // 33: pb.ReadVersionResp
	(*ReadReq)(nil),              // 34: pb.ReadReq
	(*ReadResp)(nil),             // 35: pb.ReadResp
	(*AppendDataReq)(nil),        // 36: pb.AppendDataReq
	(*AppendDataResp)(nil),       // 37: pb.AppendDataResp
	(*ReplicateReq)(nil),         // 38: pb.ReplicateReq
	(*ReplicateResp)(nil),        // 39: pb.ReplicateResp
}
var file_cdfs_proto_depIdxs = []int32{
	11, // 0: pb.CSRegisterResp.status:type_name -> pb.Status
	11, // 1: pb.GetLocationResp.status:type_name -> pb.Status
	6,  // 2: pb.GetLocationResp.chunkInfo:type_name -> pb.ChunkServerInfo
	11, // 3: pb.CreateResp.status:type_name -> pb.Status
	11, // 4: pb.DeleteStatus.status:type_name -> pb.Status
	11, // 5: pb.AppendFileResp.status:type_name -> pb.Status
	11, // 6: pb.HeartBeatResp.status:type_name -> pb.Status
	11, // 7: pb.AppendResultReq.status:type_name -> pb.Status
	11, // 8: pb.DeleteChunkResp.status:type_name -> pb.Status
	11, // 9: pb.CreateChunkResp.status:type_name -> pb.Status
	11, // 10: pb.ChangeToPrimaryResp.status:type_name -> pb.Status
	11, // 11: pb.AssignNewPrimaryResp.status:type_name -> pb.Status
	11, // 12: pb.UpdateBackupResp.status:type_name -> pb.Status
	11, // 13: pb.ForwardCreateResp.status:type_name -> pb.Status
	11, // 14: pb.GetVersionResp.status:type_name -> pb.Status
	11, // 15: pb.ReadVersionResp.status:type_name -> pb.Status
	11, // 16: pb.ReadResp.status:type_name -> pb.Status
	11, // 17: pb.AppendDataResp.status:type_name -> pb.Status
	11, // 18: pb.ReplicateResp.status:type_name -> pb.Status
	0,  // 19: pb.Master.GetToken:input_type -> pb.GetTokenReq
	4,  // 20: pb.Master.GetLocation:input_type -> pb.GetLocationReq
	7,  // 21: pb.Master.AppendFile:input_type -> pb.AppendFileReq
	8,  // 22: pb.Master.Delete:input_type -> pb.DeleteReq
	9,  // 23: pb.Master.Create:input_type -> pb.CreateReq
	14, // 24: pb.Master.HeartBeat:input_type -> pb.HeartBeatPayload
	2,  // 25: pb.Master.CSRegister:input_type -> pb.CSRegisterReq
	16, // 26: pb.Master.AppendResult:input_type -> pb.AppendResultReq
	20, // 27: pb.ChunkServer.CreateChunk:input_type -> pb.CreateChunkReq
	18, // 28: pb.ChunkServer.DeleteChunk:input_type -> pb.DeleteChunkReq
	22, // 29: pb.ChunkServer.ChangeToPrimary:input_type -> pb.ChangeToPrimaryReq
	24, // 30: pb.ChunkServer.AssignNewPrimary:input_type -> pb.AssignNewPrimaryReq
	26, // 31: pb.ChunkServer.UpdateBackup:input_type -> pb.UpdateBackupReq
	32, // 32: pb.ChunkServer.ReadVersion:input_type -> pb.ReadVersionReq
	34, // 33: pb.ChunkServer.Read:input_type -> pb.ReadReq
	36, // 34: pb.ChunkServer.AppendData:input_type -> pb.AppendDataReq
	28, // 35: pb.ChunkServer.ForwardCreate:input_type -> pb.ForwardCreateReq
	38, // 36: pb.ChunkServer.Replicate:input_type -> pb.ReplicateReq
	30, // 37: pb.ChunkServer.GetVersion:input_type -> pb.GetVersionReq
	1,  // 38: pb.Master.GetToken:output_type -> pb.GetTokenResp
	5,  // 39: pb.Master.GetLocation:output_type -> pb.GetLocationResp
	13, // 40: pb.Master.AppendFile:output_type -> pb.AppendFileResp
	12, // 41: pb.Master.Delete:output_type -> pb.DeleteStatus
	10, // 42: pb.Master.Create:output_type -> pb.CreateResp
	15, // 43: pb.Master.HeartBeat:output_type -> pb.HeartBeatResp
	3,  // 44: pb.Master.CSRegister:output_type -> pb.CSRegisterResp
	17, // 45: pb.Master.AppendResult:output_type -> pb.AppendResultResp
	21, // 46: pb.ChunkServer.CreateChunk:output_type -> pb.CreateChunkResp
	19, // 47: pb.ChunkServer.DeleteChunk:output_type -> pb.DeleteChunkResp
	23, // 48: pb.ChunkServer.ChangeToPrimary:output_type -> pb.ChangeToPrimaryResp
	25, // 49: pb.ChunkServer.AssignNewPrimary:output_type -> pb.AssignNewPrimaryResp
	27, // 50: pb.ChunkServer.UpdateBackup:output_type -> pb.UpdateBackupResp
	33, // 51: pb.ChunkServer.ReadVersion:output_type -> pb.ReadVersionResp
	35, // 52: pb.ChunkServer.Read:output_type -> pb.ReadResp
	37, // 53: pb.ChunkServer.AppendData:output_type -> pb.AppendDataResp
	29, // 54: pb.ChunkServer.ForwardCreate:output_type -> pb.ForwardCreateResp
	39, // 55: pb.ChunkServer.Replicate:output_type -> pb.ReplicateResp
	31, // 56: pb.ChunkServer.GetVersion:output_type -> pb.GetVersionResp
	38, // [38:57] is the sub-list for method output_type
	19, // [19:38] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_cdfs_proto_init() }
func file_cdfs_proto_init() {
	if File_cdfs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cdfs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSRegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkServerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChunkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChunkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChunkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChunkResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeToPrimaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeToPrimaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignNewPrimaryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignNewPrimaryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBackupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBackupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendDataResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdfs_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cdfs_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_cdfs_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_cdfs_proto_msgTypes[35].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cdfs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cdfs_proto_goTypes,
		DependencyIndexes: file_cdfs_proto_depIdxs,
		MessageInfos:      file_cdfs_proto_msgTypes,
	}.Build()
	File_cdfs_proto = out.File
	file_cdfs_proto_rawDesc = nil
	file_cdfs_proto_goTypes = nil
	file_cdfs_proto_depIdxs = nil
}
